import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score
from sklearn import preprocessing
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import AdaBoostClassifier
import bisect
import os
from tqdm import tqdm


def data_processing():

    if not (os.path.exists('Full_TD.csv') and os.path.exists('TD.csv') and os.path.exists('id.csv')):

        TrainData = pd.read_csv("train.csv")
        Testdata = pd.read_csv("test.csv")





        Full_TD=TrainData.drop(columns=['MachineIdentifier'])

        id = Testdata[['MachineIdentifier']]

        TD = Testdata.drop(columns=['MachineIdentifier'])


        features = Full_TD.columns.tolist()
        features.pop(-1)
        print(len(features))

        tmp_df = Full_TD.append(TD,sort=False)


        le = preprocessing.LabelEncoder()

        for i in tqdm(features):
            p = 0
            while pd.isna(Full_TD[i][p]):
                p = p+1
                pass

            tmpstr = Full_TD[i].mode()[0]
            Full_TD[i] = Full_TD[i].fillna(tmpstr)
            TD[i] = TD[i].fillna(tmpstr)


            if type(Full_TD[i][p])==str:
                le.fit(tmp_df[i].astype(str))
                Full_TD[i] = le.transform(Full_TD[i].astype(str))
                TD[i] = le.transform(TD[i].astype(str))
                pass
            pass

        Full_TD.to_csv('Full_TD.csv', index = False)
        TD.to_csv('TD.csv', index = False)
        id.to_csv('id.csv', index = False)

        print('Save successfully')

        pass

    else:
        print('Read processed data')
        Full_TD = pd.read_csv('Full_TD.csv')
        TD = pd.read_csv('TD.csv')
        id = pd.read_csv('id.csv')

        features = Full_TD.columns.tolist()
        features.pop(-1)








    return features,Full_TD,id,TD





if __name__ == '__main__':


    features,Full_TD,id,TD = data_processing()




    print(Full_TD.shape)

    X_tmp, X_rest, Y_tmp, Y_rest = train_test_split(Full_TD[features],Full_TD['HasDetections'],random_state=0,test_size=0.9)
    X_train, X_test, Y_train, Y_test = train_test_split(X_tmp, Y_tmp,random_state=0)


    modelfortest = RandomForestClassifier(random_state = 0, max_features = 'sqrt')
    param_test = {'n_estimators':list(range(30,110,10)),'max_depth':list(range(10,40,10))}
    print('Start cv')
    search = GridSearchCV(estimator = modelfortest, param_grid = param_test, scoring='roc_auc',
                          cv=10,verbose=3,n_jobs=-1)
    search.fit(X_train,Y_train)
    print(search.best_params_, search.best_score_)



    pred = search.score(X_test,Y_test)

    print('Accuracy: ',pred)


    pred = search.predict_proba(X_test)[:,1]

    print('AUC score: ',roc_auc_score(Y_test,pred))


    pass


